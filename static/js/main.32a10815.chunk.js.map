{"version":3,"sources":["img/RMlogo_v3.png","api/useFetch.js","api/dataRoutes.js","api/useData.js","components/CharacterCard.jsx","components/Pagination.jsx","components/Spinner.jsx","components/Characters.jsx","components/LocationCard.jsx","components/Locations.jsx","components/Residents.jsx","components/LocationDetails.jsx","components/Home.jsx","App.js","index.js"],"names":["module","exports","useFetch","initUrl","useState","isPending","setIsPending","url","setUrl","undefined","data","setData","useEffect","setTimeout","fetch","then","response","status","json","mainUrls","useLocations","pageNum","locations","CharacterCard","char","isFlipped","setIsFlipped","flipDirection","flipSpeedFrontToBack","flipSpeedBackToFront","key","id","className","onClick","src","image","alt","name","species","episode","length","gender","origin","Pagination","pageCount","handlePageClick","breakLabel","onPageChange","pageRangeDisplayed","marginPagesDisplayed","nextLabel","previousLabel","renderOnZeroPageCount","containerClassName","activeClassName","pageClassName","nextClassName","previousClassName","Spinner","Characters","setPageNum","characters","useCharacters","results","map","info","pages","selected","console","log","LocationCard","loc","to","type","Locations","locationKeeper","setLocationKeeper","getLoc","a","axios","get","pageData","locs","push","dataLength","next","hasMore","endMessage","Residents","LocationDetails","useParams","dimension","residents","Home","App","rickandmortylogo","exact","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32a10815.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/RMlogo_v3.31931b81.png\";","import React, { useState, useEffect } from \"react\";\r\n\r\n/**\r\n     Fetch data from the given url. If it can't get any data from the url, than it writes a message into the console.\r\n     *\r\n     * @param initUrl string that gives the route that the function fetch data from.\r\n     */\r\nexport const useFetch = (initUrl) => {\r\n  const [isPending, setIsPending] = useState(true)\r\n  const [url, setUrl] = useState(initUrl);\r\n  const [data, setData] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      fetch(url)\r\n        .then((response) => {\r\n          if (response.status !== 200) return \"There must be a problem\";\r\n          return response.json();\r\n        })\r\n        .then((json) => {\r\n          setData(json)\r\n          setIsPending(false)\r\n        });\r\n    }, 1000)\r\n  }, [url]);\r\n\r\n  return [data, setUrl, isPending];\r\n};\r\n","export const mainUrls = {\r\n  characters: \"https://rickandmortyapi.com/api/character/?page=\",\r\n  locations: \"https://rickandmortyapi.com/api/location/?page=\",\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useFetch } from \"./useFetch.js\";\r\nimport { mainUrls } from \"./dataRoutes.js\";\r\n\r\n/**\r\n     Fetch data from an open-source API. It returns json containing pagination.\r\n     The json contains an `info` and a `results` property. The `info` contains every information about the pagination,\r\n     the `results` contains the characters objects situated in the given page number in the pagination.\r\n     *\r\n     * @param pageNum integer that gives the pagination page number. The json `info` property contains how many pages are.\r\n     */\r\nexport const useCharacters = (pageNum = 1) => {\r\n  const [characters, setUrl, isPending] = useFetch(mainUrls.characters + pageNum);\r\n  useEffect(() => {\r\n    setUrl(mainUrls.characters + pageNum);\r\n  }, [pageNum]);\r\n  return [isPending, characters === undefined ? \"Loading...\" : characters];\r\n};\r\n\r\n/**\r\n     Fetch data from an open-source API. It returns json containing pagination.\r\n     The json contains an `info` and a `results` property. The `info` contains every information about the pagination,\r\n     the `results` contains the locations objects situated in the given page number in the pagination.\r\n     *\r\n     * @param pageNum integer that gives the pagination page number. The json `info` property contains how many pages are.\r\n     */\r\nexport const useLocations = (pageNum = 1) => {\r\n  const [locations, setUrl, isPending] = useFetch(mainUrls.locations + pageNum);\r\n  useEffect(() => {\r\n    setUrl(mainUrls.locations + pageNum);\r\n  }, [pageNum]);\r\n  return [isPending, locations === undefined ? \"Loading...\" : locations];\r\n};\r\n","import React from 'react'\r\nimport { useState } from 'react'\r\nimport ReactCardFlip from 'react-card-flip'\r\n\r\n\r\nconst CharacterCard = ({char}) => {\r\n\r\n  const [isFlipped, setIsFlipped] = useState(false);\r\n  // console.log(\"check this: \");\r\n  // console.log(char);\r\n\r\n  return (\r\n    <ReactCardFlip isFlipped={isFlipped} flipDirection=\"horizontal\" flipSpeedFrontToBack=\"1\" flipSpeedBackToFront=\"1\" key={char.id}>    \r\n      <div className=\"char-card\" onClick={()=> setIsFlipped(!isFlipped)}>\r\n          <div><img src={char.image} alt=\"Character pic...\"/></div>\r\n          <div className=\"char-details\">\r\n              <p>Name: {char.name}</p>\r\n              <p>Species: {char.species}</p>\r\n          </div>\r\n      </div>\r\n      <div className=\"char-card\" onClick={()=> setIsFlipped(!isFlipped)}>\r\n          <div><img src={char.image} alt=\"Characted pic...\"/></div>\r\n          <div className=\"char-details\">\r\n              <p>Name: {char.name}</p>\r\n              <p>Species: {char.species}</p>\r\n              <p># of episodes: {char.episode.length}</p>\r\n              <p>Gender: {char.gender}</p>\r\n              <p>Origin: {char.origin.name}</p>\r\n              <p>Status: {char.status}</p>\r\n\r\n          </div>\r\n      </div>\r\n    </ReactCardFlip>\r\n  )\r\n}\r\n\r\nexport default CharacterCard\r\n","import React from 'react'\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nconst Pagination = ({pageCount, handlePageClick}) => {\r\n\r\n\r\n  return (\r\n    <div className=\"char-pagination container\">\r\n      <ReactPaginate\r\n        breakLabel=\" ... \"\r\n        onPageChange={handlePageClick}\r\n        pageRangeDisplayed={3}\r\n        pageCount={pageCount}\r\n        marginPagesDisplayed={1}\r\n        nextLabel=\">\"\r\n        previousLabel=\"<\"\r\n        renderOnZeroPageCount={null}\r\n        containerClassName={\"paginationBtns\"}\r\n        activeClassName={\"btn-pagi-active\"}\r\n        pageClassName={\"btn-pagi\"}\r\n        nextClassName={\"btn-pagi-prev-next\"}\r\n        previousClassName={\"btn-pagi-prev-next\"}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Pagination\r\n","import React from 'react';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"loading-center loading-bubble\">\r\n      <div className=\"loading-spinner\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport CharacterCard from './CharacterCard'\r\nimport { useCharacters } from '../api/useData';\r\nimport Pagination from './Pagination'\r\nimport Spinner from './Spinner'\r\n\r\n\r\nconst Characters = () => {\r\n\r\n  const [pageNum, setPageNum] = useState(1)\r\n  const [isPending, characters] = useCharacters(pageNum);\r\n\r\n  const handlePageClick = ({selected}) => {\r\n    console.log(selected + 1)\r\n    setPageNum(selected + 1)\r\n  }\r\n\r\n  return ( \r\n    <>\r\n      <div className=\"char-container\">\r\n\r\n        { isPending && <Spinner />}\r\n\r\n        { !isPending && characters.results.map(char =>\r\n        <CharacterCard char={char} key={char.id}/>\r\n        )}\r\n\r\n      </div>\r\n      { !isPending && <Pagination pageCount={characters.info.pages} handlePageClick={handlePageClick} /> }\r\n    </>\r\n  )\r\n}\r\n \r\nexport default Characters;\r\n","import React from 'react'\r\nimport { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nconst LocationCard = ({loc}) => {\r\n\r\n  return (\r\n    <Link to={`/locations/${loc.id}`}>\r\n      <div className=\"loc-card\">\r\n          <div className=\"loc-info\">\r\n              <p>{loc.id}</p>\r\n              <p><strong>Name:</strong><br/> {loc.name}</p>\r\n              <p><strong>Type:</strong><br/> {loc.type}</p>\r\n          </div>\r\n      </div>\r\n    </Link>\r\n  )\r\n}\r\n\r\nexport default LocationCard\r\n","import React from \"react\";\r\nimport LocationCard from './LocationCard'\r\nimport { useLocations } from '../api/useData';\r\nimport { useState, useEffect } from \"react\";\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport axios from 'axios'\r\nimport Spinner from './Spinner'\r\n\r\n\r\nconst Locations = () => {\r\n\r\n  const [ pageNum, setPageNum ] = useState(1)\r\n  const [ isPending, locations ] = useLocations(pageNum);\r\n  const [ locationKeeper, setLocationKeeper ] = useState([])\r\n\r\n  const getLoc = async (pageNum) => {\r\n    const pageData = await axios.get(\"https://rickandmortyapi.com/api/location/?page=\" + pageNum)\r\n    for (const locs of pageData.data.results) {\r\n      locationKeeper.push(locs)\r\n    }\r\n    \r\n    setLocationKeeper([...locationKeeper])\r\n    setPageNum(pageNum + 1)\r\n  }\r\n  useEffect(() => {\r\n    getLoc(pageNum)\r\n  },[])\r\n  // console.log(locationKeeper)\r\n\r\n  const triggerLoad = () => {\r\n    \r\n    getLoc(pageNum)\r\n  }\r\n\r\n\r\n\r\n  return ( \r\n    <InfiniteScroll dataLength={locationKeeper.length} next={triggerLoad} hasMore={pageNum < 8} endMessage={\"End of story...\"} className={\"infinite-scroll\"}>\r\n      <div className=\"loc-container\">\r\n\r\n        { isPending && <Spinner />}\r\n\r\n          { !isPending && locationKeeper.map(loc =>\r\n          <LocationCard loc={loc} key={loc.id}/>\r\n          )}\r\n          \r\n      </div>\r\n    </InfiniteScroll>\r\n  )\r\n}\r\n \r\nexport default Locations;\r\n","import React from \"react\";\r\nimport { useFetch } from \"../api/useFetch\";\r\nimport CharacterCard from './CharacterCard'\r\nimport Spinner from './Spinner'\r\n\r\n\r\nconst Residents = ({url}) => {\r\n\r\n  const [ data, asdf, isPending ] = useFetch(url)\r\n\r\n\r\n  // console.log(isPending)\r\n  // console.log(data)\r\n\r\n\r\n  return (\r\n    <>\r\n      { isPending && <Spinner />}\r\n      { !isPending && \r\n\r\n\r\n        <div className=\"residents-box\">\r\n          <CharacterCard char={data} key={data.id}/>\r\n          {/* <figure>\r\n            <img src={data.image} />\r\n            <figcaption>{data.name}</figcaption>\r\n          </figure> */}\r\n        </div>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Residents","import React from 'react'\r\nimport { useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useFetch } from '../api/useFetch'\r\nimport Residents from './Residents'\r\nimport Spinner from './Spinner'\r\n\r\nconst LocationDetails = () => {\r\n\r\n  const { id } = useParams()\r\n  const [ data, url, isPending ] = useFetch('https://rickandmortyapi.com/api/location/' + id)\r\n\r\n//   console.log(data)\r\n//   console.log(isPending)\r\n\r\n    return (\r\n      <>\r\n        { isPending && <Spinner />}\r\n\r\n        { !isPending && \r\n        <div className=\"loc-details\">\r\n          <div className=\"loc-innerbox\">\r\n            <h2>Location Details - { id }</h2>\r\n            <div className=\"loc-inbox-container\">\r\n              <div className=\"loc-details-info\">\r\n                <p><b>Name:</b> {data.name}</p>\r\n                <p><b>Type:</b> {data.type}</p>\r\n                <p><b>Dimension:</b> {data.dimension}</p>\r\n              </div>\r\n                <h3>Residents:</h3>\r\n                {data.residents.map(url => \r\n                  <Residents url={url} key={url}/>\r\n                )}\r\n            </div>\r\n          </div>\r\n        </div>}\r\n      </>\r\n    )\r\n\r\n}\r\n\r\nexport default LocationDetails","import React from 'react'\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"description\">\r\n      <p>Do you know Rick and Morty? If not, start watching it!</p>\r\n      <p>Anyways, the Rick and Morty universe is kinda big with lot of characters and locations. \r\n        Me and my friends decided that we want to make it easier to look up information about each characters and locations.\r\n        We created a React app that with the use of an open-source API, shows information about everything you need to know.</p>\r\n    </div> \r\n  )\r\n}\r\n\r\nexport default Home\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Routes, Link} from 'react-router-dom'\r\nimport { useState } from \"react\";\r\nimport { useCharacters, useLocations } from \"./api/useData\";\r\nimport rickandmortylogo from \"./img/RMlogo_v3.png\"\r\nimport Characters from \"./components/Characters\";\r\nimport Locations from \"./components/Locations\";\r\nimport LocationDetails from './components/LocationDetails'\r\nimport Home from './components/Home'\r\n\r\n\r\nfunction App() {\r\n\r\n  const locations = useLocations(1);\r\n\r\n  // console.log(\"Locations data: \");\r\n  // console.log(locations);\r\n\r\n  const [showChars, setShowChars] = useState(false);\r\n  const [showLocs, setShowLocs] = useState(false)\r\n\r\n  const handleCharClick = () => {\r\n    setShowChars(!showChars)\r\n    setShowLocs(false)\r\n  }\r\n\r\n  const handleLocClick = () => {\r\n    setShowLocs(!showLocs)\r\n    setShowChars(false)\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <header>\r\n          <div className=\"logo\">\r\n            <Link to=\"/\"><img src={rickandmortylogo} alt=\"\" /></Link>\r\n          </div>\r\n          <div className=\"buttons\">\r\n            <Link to=\"/characters\"><button className=\"btn btn-characters\">Characters</button></Link>\r\n            <Link to=\"/locations\"><button className=\"btn btn-locations\">Locations</button></Link>\r\n          </div>\r\n        </header>\r\n\r\n        <Routes>\r\n          <Route exact path=\"/\" element={<Home />} />\r\n          <Route exact path=\"/characters\" element={<Characters />} />\r\n          <Route exact path=\"/locations\" element={<Locations />} />\r\n          <Route exact path=\"/locations/:id\" element={<LocationDetails />} />\r\n        </Routes>\r\n\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport './styles/Spinner.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}